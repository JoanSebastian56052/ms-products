service: ms-products

plugins:
  - serverless-plugin-log-subscription
  - serverless-prune-plugin
  - serverless-dynamodb-autoscaling

provider:
  name: aws
  runtime: nodejs12.x
  region: us-east-1
  timeout: 10
  memorySize: 512
  deploymentBucket:
    name: codepipeline-us-east-1-508274382610
  iamRoleStatements:
    - Effect: Allow
      Action:
        - "dynamodb:PutItem"
        - "dynamodb:DeleteItem"
        - "dynamodb:UpdateItem"
        - "dynamodb:Query"
        - "dynamodb:Scan"
      Resource: "*"
  
  apiGateway:
    restApiId: 
      'Fn::ImportValue': store-api-ApiID
    restApiResources:
      /v1/store/:
        'Fn::ImportValue': store-api-StoreID
  
functions:
  products-feature:
    handler: index.productsFeatureHandler
    description: microservice for feature products.
    events: 
      - http:
          method: get
          path: /v1/store/products/feature
          cors: true
          integration: lambda
          request:
            headers:
              Content-Type: "'application/json'"
          response:
            headers:
              Content-Type: "'application/json'"
  create-products:
    handler: index.createProductHandler
    description: microservice for create products
    events: 
      - http:
          method: post
          path: /v1/store/products
          cors: true
          integration: lambda
          request:
            headers:
              Content-Type: "'application/json'"
          response:
            headers:
              Content-Type: "'application/json'"
  delete-products:
    handler: index.deleteProductHandler
    description: microservice for delete products.
    events: 
      - http:
          method: delete
          path: /v1/store/products
          cors: true
          integration: lambda
          request:
            headers:
              Content-Type: "'application/json'"
          response:
            headers:
              Content-Type: "'application/json'"
  update-products:
    handler: index.updateProductHandler
    description: microservice for update products.
    events: 
      - http:
          method: put
          path: /v1/store/products
          cors: true
          integration: lambda
          request:
            headers:
              Content-Type: "'application/json'"
          response:
            headers:
              Content-Type: "'application/json'"
  get-products:
    handler: index.getProductHanlder
    description: microservice for get products.
    events: 
      - http:
          method: get
          path: /v1/store/products
          cors: true
          integration: lambda
          request:
            headers:
              Content-Type: "'application/json'"
          response:
            headers:
              Content-Type: "'application/json'"

resources:
  Resources:
    ProductsDB:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: products
        AttributeDefinitions:
          - AttributeName: "id"
            AttributeType: N
          - AttributeName: "name"
            AttributeType: S
          - AttributeName: "description"
            AttributeType: S
          - AttributeName: "price"
            AttributeType: S
          - AttributeName: "discount"
            AttributeType: S
          - AttributeName: "priceDiscount"
            AttributeType: S
          - AttributeName: "images"
            AttributeType: M
          - AttributeName: "countrySale"
            AttributeType: S
          - AttributeName: "feature"
            AttributeType: BOOL
        KeySchema:
          - AttributeName: "id"
            KeyType: "HASH"
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5